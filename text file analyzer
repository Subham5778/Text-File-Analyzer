import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class TextFileAnalyzer {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user to enter the file path
        System.out.print("Enter the path of the text file: ");
        String filePath = scanner.nextLine();

        // Initialize counters
        int wordCount = 0;
        int lineCount = 0;
        int charCount = 0;
        Set<String> uniqueWords = new HashSet<>();
        Map<String, Integer> wordFrequency = new HashMap<>();
        String longestWord = "";
        String shortestWord = "";

        // Try with resources to ensure the file is closed
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;

            // Read each line from the file
            while ((line = reader.readLine()) != null) {
                lineCount++;
                charCount += line.length();
                String[] words = line.split("\\s+");

                for (String word : words) {
                    if (!word.isEmpty()) {
                        word = word.toLowerCase(); // Ignore case sensitivity
                        wordCount++;
                        uniqueWords.add(word);
                        wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);

                        if (longestWord.isEmpty() || word.length() > longestWord.length()) {
                            longestWord = word;
                        }
                        if (shortestWord.isEmpty() || word.length() < shortestWord.length()) {
                            shortestWord = word;
                        }
                    }
                }
            }

            // Display the results
            System.out.println("Number of lines: " + lineCount);
            System.out.println("Number of words: " + wordCount);
            System.out.println("Number of characters: " + charCount);
            System.out.println("Number of unique words: " + uniqueWords.size());
            System.out.println("Longest word: " + longestWord);
            System.out.println("Shortest word: " + shortestWord);

            // Ask the user if they want to see the top N frequent words
            System.out.print("Do you want to see the top N frequent words? (yes/no): ");
            String response = scanner.nextLine();

            if (response.equalsIgnoreCase("yes")) {
                System.out.print("Enter the value of N: ");
                int N = scanner.nextInt();
                displayTopNFrequentWords(wordFrequency, N);
            }

            // Ask the user if they want to search for a specific word
            System.out.print("Do you want to search for a specific word? (yes/no): ");
            scanner.nextLine(); // Consume newline
            response = scanner.nextLine();

            if (response.equalsIgnoreCase("yes")) {
                System.out.print("Enter the word to search for: ");
                String wordToSearch = scanner.nextLine();
                searchWordInFile(filePath, wordToSearch);
            }

        } catch (IOException e) {
            System.out.println("An error occurred while reading the file: " + e.getMessage());
        }

        scanner.close();
    }

    // Method to search for a specific word in the file
    private static void searchWordInFile(String filePath, String wordToSearch) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int lineNumber = 0;
            boolean found = false;
            wordToSearch = wordToSearch.toLowerCase(); // Ignore case sensitivity

            // Read each line from the file
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                if (line.toLowerCase().contains(wordToSearch)) {
                    System.out.println("Word found in line " + lineNumber + ": " + line);
                    found = true;
                }
            }

            if (!found) {
                System.out.println("Word not found in the file.");
            }

        } catch (IOException e) {
            System.out.println("An error occurred while reading the file: " + e.getMessage());
        }
    }

    // Method to display the top N frequent words
    private static void displayTopNFrequentWords(Map<String, Integer> wordFrequency, int N) {
        PriorityQueue<Map.Entry<String, Integer>> maxHeap = new PriorityQueue<>(
                (a, b) -> b.getValue().compareTo(a.getValue())
        );

        maxHeap.addAll(wordFrequency.entrySet());

        System.out.println("Top " + N + " most frequent words:");
        for (int i = 0; i < N && !maxHeap.isEmpty(); i++) {
            Map.Entry<String, Integer> entry = maxHeap.poll();
            System.out.println(entry.getKey() + ": " + entry.getValue() + " times");
        }
    }
}
